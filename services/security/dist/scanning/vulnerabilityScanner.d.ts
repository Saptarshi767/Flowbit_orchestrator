export interface VulnerabilityReport {
    id: string;
    timestamp: Date;
    scanType: 'dependency' | 'container' | 'code' | 'infrastructure';
    status: 'completed' | 'failed' | 'in_progress';
    vulnerabilities: Vulnerability[];
    summary: {
        total: number;
        critical: number;
        high: number;
        medium: number;
        low: number;
    };
    metadata: {
        scanner: string;
        version: string;
        duration: number;
    };
}
export interface Vulnerability {
    id: string;
    title: string;
    description: string;
    severity: 'critical' | 'high' | 'medium' | 'low';
    cvss: number;
    cve?: string;
    package?: string;
    version?: string;
    fixedVersion?: string;
    references: string[];
    remediation?: string;
}
export declare class VulnerabilityScanner {
    private scanResults;
    private scanQueue;
    private isScanning;
    private scanHistory;
    scanDependencies(projectPath: string): Promise<VulnerabilityReport>;
    scanContainer(imageName: string): Promise<VulnerabilityReport>;
    scanCode(projectPath: string): Promise<VulnerabilityReport>;
    getReport(reportId: string): Promise<VulnerabilityReport | undefined>;
    getAllReports(): Promise<VulnerabilityReport[]>;
    generateComplianceReport(): Promise<any>;
    private parseNpmAuditResult;
    private parseTrivyResult;
    private parseSemgrepResult;
    private mapSeverity;
    private mapSemgrepSeverity;
    private severityToCvss;
    private calculateSummary;
    private generateRecommendations;
    scheduleScan(scanType: VulnerabilityReport['scanType'], target: string, schedule?: string): Promise<string>;
    private processScanQueue;
    scanInfrastructure(target: string): Promise<VulnerabilityReport>;
    private performInfrastructureScan;
    generateSBOM(projectPath: string): Promise<SBOM>;
    scanSBOM(sbom: SBOM): Promise<VulnerabilityReport>;
    private checkComponentVulnerabilities;
    getContinuousMonitoringStatus(): Promise<ContinuousMonitoringStatus>;
    private getNextScheduledScan;
    getScanHistory(limit?: number): ScanHistory[];
}
interface ScanHistory {
    jobId: string;
    scanType: VulnerabilityReport['scanType'];
    target: string;
    status: 'completed' | 'failed';
    vulnerabilityCount?: number;
    criticalCount?: number;
    error?: string;
    timestamp: Date;
}
interface SBOM {
    bomFormat: string;
    specVersion: string;
    version: number;
    metadata: {
        timestamp: Date;
        tools: string[];
        component: {
            name: string;
            version: string;
            type: string;
        };
    };
    components: SBOMComponent[];
}
interface SBOMComponent {
    name: string;
    version: string;
    type: string;
    supplier: string;
    licenses: string[];
    hashes: string[];
}
interface ContinuousMonitoringStatus {
    isActive: boolean;
    activeScans: number;
    queuedScans: number;
    scansLast24h: number;
    vulnerabilitiesFound: number;
    criticalVulnerabilitiesFound: number;
    lastScanTime: number | null;
    nextScheduledScan: Date | null;
}
export declare const vulnerabilityScanner: VulnerabilityScanner;
export {};
//# sourceMappingURL=vulnerabilityScanner.d.ts.map